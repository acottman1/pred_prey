{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh12880\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Import math\
Import random\
\
Class agent:\
	def  __init__(self, agentType, p, q):\
		self.predOrPrey = agentType\
		if agentType == \'91pred\'92:\
			self.__probCapture = p\
			self.__preyEaten = 0\
			self.__reproduced = 0\
			self.__totalEaten = 0\
			self.__alive = True\
		else:\
			self.__probEscape = 1-p\
			self.__reproduceRate = q\
			self.__alive = True\
	#define functions to call each piece of information in the class\
	\
	def getCapture(self):\
		#Return the probability for capturing prey\
		return self.__probCapture\
	\
	def getPreyEaten\
		#return the number of prey eaten since reproducing \
		return self.__preyEaten\
\
	def getReproduced(self):\
		#returns the number of times the agent has reproduced\
		return self.__reproduced\
\
	def getTotalEaten(self):\
		#returns the total amount of prey eaten\
		return self.__totalEaten\
\
	def getEscape(self):\
		#returns the probability of the prey escaping\
		return self.__probEscape\
\
	def getReproductionRate(self):\
		#return the rate of the prey reproducing\
		return self.__reproduceRate\
		\
	def getAlive(self):\
		#returns wether the agent is alive or dead (True/False)\
		return self.__alive\
\
Class PredPreyModel:\
	def __init__(self):\
		#initialize the model using the below parameters.\
		self.__generations = 5000\
\
		#specify the number of each agent\
		self.__numberOfPrey = 1000\
		self.__numberofPred = 100\
		\
		#create list to track number of predators and prey\
		#possibly do this a different way\
		self.__countPred = []\
		self.__countPrey = []\
		}